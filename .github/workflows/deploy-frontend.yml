name: Deploy Frontend to S3

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (prod or staging)"
        required: true
        default: prod
  pull_request:
    types: [closed]
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  PROD_BUCKET: carbontrack-frontend-production
  STAGING_BUCKET: carbontrack-frontend-staging
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
  PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Prepare dist folder and cache-bust
        shell: bash
        run: |
          mkdir -p dist
          cp -r frontend/* dist/
          
          # Replace localhost API URLs with production URL if provided
          if [ -n "$PRODUCTION_API_URL" ]; then
            sed -i "s|http://localhost:8000|$PRODUCTION_API_URL|g" dist/index.html || true
            sed -i "s|http://127.0.0.1:8000|$PRODUCTION_API_URL|g" dist/index.html || true
          fi
          
          # Cache-bust app-full.js reference
          sed -i 's|app-full.js|app-full.js?v=${{ github.sha }}|g' dist/index.html || true

      - name: Configure AWS credentials (OIDC)
        if: ${{ env.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS credentials (Access Keys fallback)
        if: ${{ env.AWS_ROLE_TO_ASSUME == '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine target bucket
        id: bucket
        shell: bash
        run: |
          ENVIRONMENT="prod"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.environment }}" = "staging" ]; then
            ENVIRONMENT="staging"
          fi
          if [ "$ENVIRONMENT" = "staging" ]; then
            echo "bucket=${STAGING_BUCKET}" >> $GITHUB_OUTPUT
          else
            echo "bucket=${PROD_BUCKET}" >> $GITHUB_OUTPUT
          fi

      - name: Show target
        run: echo "Deploying to bucket ${{ steps.bucket.outputs.bucket }} in $AWS_REGION"

      - name: Upload static site
        run: |
          # 1) Long cache for non-HTML assets
          aws s3 sync dist s3://${{ steps.bucket.outputs.bucket }} \
            --delete \
            --exclude "*.html" \
            --cache-control "public, max-age=31536000, immutable"

          # 2) Short cache for HTML (ensures page updates are immediate)
          aws s3 sync dist s3://${{ steps.bucket.outputs.bucket }} \
            --exclude "*" --include "*.html" \
            --cache-control "no-cache, no-store, must-revalidate"

      - name: CloudFront invalidation (optional)
        if: ${{ env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
