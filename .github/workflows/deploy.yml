name: Deploy CarbonTrack to Production

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual deployment trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      confirm:
        description: 'Type "DEPLOY" to confirm'
        required: true

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.10'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install moto[cognitoidp] pytest-mock
        
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v
      env:
        AWS_ACCESS_KEY_ID: fake-test-key-id
        AWS_SECRET_ACCESS_KEY: fake-test-secret-key
        AWS_DEFAULT_REGION: us-east-1
        COGNITO_USER_POOL_ID: fake-pool-id
        COGNITO_CLIENT_ID: fake-client-id
        TESTING: true
        
    - name: Test carbon calculations
      run: |
        cd backend
        python test_carbon_calculator.py

  build-frontend:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create production build
      run: |
        mkdir -p dist
        cp -r frontend/* dist/
        
    - name: Optimize production files
      run: |
        # Install optimization tools
        npm install -g clean-css-cli html-minifier terser
        
        # Minify CSS (inline styles in HTML)
        html-minifier --collapse-whitespace --remove-comments --minify-css --minify-js \
          -o dist/index.html dist/index.html
          
        # Optimize any separate CSS files if they exist
        find dist -name "*.css" -exec cleancss -o {} {} \;
        
        # Minify JavaScript files if they exist
        find dist -name "*.js" -exec terser {} -o {} \;
        
    - name: Configure production API URLs
      run: |
        # Replace localhost API URLs with production URLs
        sed -i 's|http://localhost:8000|${{ secrets.PRODUCTION_API_URL }}|g' dist/index.html
        sed -i 's|http://127.0.0.1:8000|${{ secrets.PRODUCTION_API_URL }}|g' dist/index.html
        
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: dist/

  build-backend:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Package backend for Lambda
      run: |
        cd backend
        
        # Create deployment package
        mkdir -p ../lambda-package
        
        # Copy application code
        cp -r app ../lambda-package/
        cp requirements.txt ../lambda-package/
        
        # Install dependencies
        pip install -r requirements.txt -t ../lambda-package/
        
        # Create Lambda handler
        cat > ../lambda-package/lambda_function.py << 'EOF'
        import json
        from mangum import Mangum
        from app.main import app
        
        # Mangum adapter for AWS Lambda
        handler = Mangum(app)
        
        def lambda_handler(event, context):
            return handler(event, context)
        EOF
        
        # Create requirements for Lambda
        echo "mangum==0.17.0" >> ../lambda-package/requirements.txt
        
    - name: Install Lambda dependencies
      run: |
        cd lambda-package
        pip install -r requirements.txt -t .
        
    - name: Create deployment package
      run: |
        cd lambda-package
        zip -r ../carbon-track-backend.zip .
        
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-lambda
        path: carbon-track-backend.zip

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Deploy infrastructure with CloudFormation
      run: |
        aws cloudformation deploy \
          --template-file infra/cloudformation-template.yaml \
          --stack-name carbontrack-production \
          --parameter-overrides \
            DomainName=${{ secrets.DOMAIN_NAME }} \
            CertificateArn=${{ secrets.SSL_CERTIFICATE_ARN }} \
          --capabilities CAPABILITY_IAM

  deploy-backend:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Download backend artifact
      uses: actions/download-artifact@v3
      with:
        name: backend-lambda
        
    - name: Deploy to Lambda
      run: |
        aws lambda update-function-code \
          --function-name carbontrack-api \
          --zip-file fileb://carbon-track-backend.zip
          
    - name: Update Lambda environment variables
      run: |
        aws lambda update-function-configuration \
          --function-name carbontrack-api \
          --environment Variables='{
            "DATABASE_URL": "${{ secrets.DATABASE_URL }}",
            "JWT_SECRET_KEY": "${{ secrets.JWT_SECRET_KEY }}",
            "AWS_COGNITO_USER_POOL_ID": "${{ secrets.COGNITO_USER_POOL_ID }}",
            "AWS_COGNITO_CLIENT_ID": "${{ secrets.COGNITO_CLIENT_ID }}",
            "ENVIRONMENT": "production"
          }'

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Download frontend artifact
      uses: actions/download-artifact@v3
      with:
        name: frontend-dist
        path: dist/
        
    - name: Deploy to S3
      run: |
        aws s3 sync dist/ s3://carbontrack-frontend-${{ secrets.ENVIRONMENT }} \
          --delete \
          --cache-control "max-age=31536000" \
          --exclude "*.html" \
          --exclude "service-worker.js"
          
        # HTML files with shorter cache for updates
        aws s3 sync dist/ s3://carbontrack-frontend-${{ secrets.ENVIRONMENT }} \
          --delete \
          --cache-control "max-age=0, no-cache, no-store, must-revalidate" \
          --include "*.html" \
          --include "service-worker.js"
          
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-backend.result }}" = "success" ] && [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
          echo "üöÄ Deployment successful! CarbonTrack is now live."
          echo "üåç Frontend: https://${{ secrets.DOMAIN_NAME }}"
          echo "üîó API: ${{ secrets.PRODUCTION_API_URL }}"
        else
          echo "‚ùå Deployment failed. Check the logs above for details."
          exit 1
        fi